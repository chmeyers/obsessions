@breaking_reason_fired = 2
@breaking_reason_denied = 3
@breaking_reason_timeout = 4

give_next_shield_tech_option_effect = {
	if = {
		limit = { NOT = { has_technology = tech_shields_2 }  }
		add_research_option = tech_shields_2
		add_tech_progress = { tech = tech_shields_2 progress = 0.5 }
	}
	else_if = {
		limit = { NOT = { has_technology = tech_shields_3 } } 
		add_research_option = tech_shields_3
		add_tech_progress = { tech = tech_shields_3 progress = 0.5 }
	}
	else_if = {
		limit = { NOT = { has_technology = tech_shields_4 } } 
		add_research_option = tech_shields_4
		add_tech_progress = { tech = tech_shields_4 progress = 0.5 }
	}
	else_if = {
		limit = { NOT = { has_technology = tech_shields_5 } } 
		add_research_option = tech_shields_5
		add_tech_progress = { tech = tech_shields_5 progress = 0.5 }
	}
	else = {
		add_research_option = tech_repeatable_improved_shield_output
		add_tech_progress = { tech = tech_repeatable_improved_shield_output progress = 0.75 }
	}
}

give_next_gene_tech_effect = {
	if = {
		limit = { NOT = { has_technology = tech_genome_mapping } } 
		add_research_option = tech_genome_mapping
		add_tech_progress = { tech = tech_genome_mapping progress = 0.5 }
	}
	else_if = {
		limit = { NOT = { has_technology = tech_vitality_boosters } } 
		add_research_option = tech_vitality_boosters
		add_tech_progress = { tech = tech_vitality_boosters progress = 0.5 }
	}
	else_if = {
		limit = { NOT = { has_technology = tech_epigenetic_triggers } } 
		add_research_option = tech_epigenetic_triggers
		add_tech_progress = { tech = tech_epigenetic_triggers progress = 0.5 }
	}
	else_if = {
		limit = { NOT = { has_technology = tech_cloning } } 
		add_research_option = tech_cloning
		add_tech_progress = { tech = tech_cloning progress = 0.5 }
	}
	else = {
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier3researchreward
			min = @tier3researchmin
			max = @tier3researchmax
		}
	}
}

give_next_alloys_tech_effect = {
	if = {
		limit = { NOT = { has_technology = tech_alloys_1 } } 
		add_research_option = tech_alloys_1 
		add_tech_progress = { tech = tech_alloys_1 progress = 0.75 }
	}
	else_if = {
		limit = { NOT = { has_technology = tech_alloys_2 } } 
		add_research_option = tech_alloys_2
		add_tech_progress = { tech = tech_alloys_2 progress = 0.5 }
	}
	else_if = {
		limit = { NOT = { has_technology = tech_advanced_metallurgy_1 } } 
		add_research_option = tech_advanced_metallurgy_1
		add_tech_progress = { tech = tech_advanced_metallurgy_1 progress = 0.5 }
	}
	else_if = {
		limit = { NOT = { has_technology = tech_advanced_metallurgy_2 } } 
		add_research_option = tech_advanced_metallurgy_2
		add_tech_progress = { tech = tech_advanced_metallurgy_2 progress = 0.5 }
	}
	else = {
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier3researchreward
			min = @tier3researchmin
			max = @tier3researchmax
		}
	}
}

create_obsessed_pirate_king = {
	event_target:obsessions_planet_target = {
		save_event_target_as = pirate_home
		create_country = {
			name = "NAME_Obsession"
			type = pirate
			species = event_target:obsessed_scientist_species
			name_list = "PRT1"
			flag = {
				background = {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors ={
					"black"
					"black"
					"null"
					"null"
				}
			}
			effect = {
				save_event_target_as = pirate_band
			}
		}
		event_target:pirate_band = {
			set_name = random
			randomize_flag_symbol = "pirate"
			every_country = {
				establish_communications_no_message = prev
			}
			create_fleet = {
				name = "NAME_Obsession"
				effect = {
					set_owner = event_target:pirate_band
					create_privateer_ships_3 = yes
					set_leader = obsessed_scientist_breakdown
					set_location = event_target:obsessions_planet_target
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 800
				}
			}
		}
	}
}

create_obsessed_country = {
	if = {
		limit = {
			NOT = {
				exists = event_target:obsession_country
			}
		}
		create_country = {
			name = "NAME_Obsession"
			species = event_target:obsessed_scientist_species
			type = default
			ethos = random
			origin = origin_separatists
			auto_delete = no
			
			effect = {
				set_country_flag = obsession_country
				set_leader = obsessed_scientist_breakdown
				establish_communications_no_message = event_target:obsession_source_country
				copy_techs_from = { target = event_target:obsession_source_country }
				add_resource = { influence = 200 }
				add_resource = { energy = 10000 }
				add_resource = { food = 5000 }
				add_resource = { minerals = 5000 }
				add_resource = { alloys = 2500 }
				add_resource = { consumer_goods = 5000 }
				add_resource = { unity = 15000 }
				save_global_event_target_as = obsession_country
			}
		}
	}
}

obsessed_take_system = {
	solar_system = {
		if = {
			limit = { exists = starbase }
			starbase = {
				owner = {
					save_event_target_as = old_owner
				}
				set_owner = event_target:obsession_country
			}
		}
		else = {
			create_starbase = {
				size = starbase_outpost
				owner = event_target:obsession_country
			}
		}
		starbase = {
			if = {
				limit = { has_starbase_size = starbase_outpost }
				set_starbase_size = starbase_starport
				set_starbase_module = {
					slot = 1
					module = shipyard
				}
				set_starbase_module = {
					slot = 2
					module = shipyard
				}
			}
			else_if = {
				limit = {
					NOT = { has_starbase_module = shipyard }
				}
				set_starbase_module = {
					slot = 1
					module = shipyard
				}
				set_starbase_module = {
					slot = 2
					module = shipyard
				}
			}
		}
		if = {
			limit = { exists = event_target:old_owner }
			event_target:obsession_country = {
				establish_communications_no_message = event_target:old_owner
			}
			add_claims = {
				who = event_target:old_owner
				show_notification = no
			}
		}
	}
}

obsessed_root_take_system = {
	solar_system = {
		if = {
			limit = { exists = starbase }
			starbase = {
				owner = {
					save_event_target_as = old_owner
				}
				set_owner = root
			}
		}
		else = {
			create_starbase = {
				size = starbase_outpost
				owner = root
			}
		}
		if = {
			limit = { exists = event_target:old_owner }
			add_claims = {
				who = event_target:old_owner
				show_notification = no
			}
			event_target:old_owner = {
				add_opinion_modifier = { who = root modifier = opinion_obsession_took_system }
			}
		}
	}
}

obsessed_root_take_planet = {
	set_owner = root
	if = {
		limit = {
			is_colony = no
		}
		create_colony = {
			owner = root
			species = event_target:obsessed_scientist_species
		}
	}
	if = {
		limit = { exists = event_target:old_owner }
		event_target:old_owner = {
			add_opinion_modifier = { who = root modifier = opinion_obsession_took_colony }
		}
	}
}

obsessed_only_war = {
	if = {
		limit = {
			exists = event_target:old_owner
			NOT = { event_target:old_owner = { is_same_empire = event_target:obsession_source_country } }
		}
		event_target:obsession_country = {
			declare_war = {
				target = event_target:old_owner
				name = {
					key = "NAME_Obsession_War"
				}
				attacker_war_goal = "wg_independence"
				effect = { save_event_target_as = obsession_war }
			}
		}
	}
}

obsessed_root_war = {
	if = {
		limit = {
			exists = event_target:old_owner
			NOT = { event_target:old_owner = { is_same_empire = event_target:obsession_source_country } }
		}
		root = {
			declare_war = {
				target = event_target:old_owner
				name = {
					key = "NAME_Obsession_War"
				}
				attacker_war_goal = "wg_conquest"
			}
		}
	}
}

obsessed_take_planet = {
	set_owner = event_target:obsession_country
	if = {
		limit = {
			is_colony = no
		}
		create_colony = {
			owner = event_target:obsession_country
			species = event_target:obsessed_scientist_species
		}
	}
	create_pop = {
		species = event_target:obsessed_scientist_species
	}
}

create_obsessed_fleet = {
	event_target:obsessions_planet_target = {
		create_fleet = {
			name = "NAME_Obsession"
			effect = {
				set_owner = event_target:obsession_country
				create_privateer_ships_3 = yes
				set_location = event_target:obsessions_planet_target
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = self
				set_aggro_range = 800
			}
		}
		create_fleet = {
			name = "NAME_Obsession"
			settings = { spawn_debris = no }
			effect = {
				set_owner = event_target:obsession_country
				create_ship = {
					name = "NAME_Unknown"
					random_existing_design = colonizer
					colonizer_species = event_target:obsessed_scientist_species
					graphical_culture = event_target:obsessed_scientist_species
				}
				set_location = event_target:obsessions_planet_target
			}
		}
		create_fleet = {
			name = "NAME_Obsession"
			settings = { spawn_debris = no }
			effect = {
				set_owner = event_target:obsession_country
				create_ship = {
					name = "NAME_Unknown"
					random_existing_design = constructor
					graphical_culture = event_target:obsessed_scientist_species
				}
				set_location = event_target:obsessions_planet_target
			}
		}
	}
}

set_obsessed_origin_opinion = {
	if = {
		limit = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = agreed_to_support
			}
		}
		event_target:obsession_country = {
			add_opinion_modifier = { who = root modifier = opinion_obsession_country_very_good_start }
		}
	}
	else_if = {
		limit = {
			event_target:obsessed_scientist_breakdown = {
				calc_true_if = {
					amount >= 3
					check_variable = { which = obsession_break_reason value = @breaking_reason_fired }
					check_variable = { which = obsession_break_reason value = @breaking_reason_denied }
					check_variable = { which = obsession_break_reason value = @breaking_reason_timeout }
					has_leader_flag = asked_who
					has_leader_flag = asked_crazy
					NOT = { has_leader_flag = asked_polite }
				}
			}
		}
		event_target:obsession_country = {
			add_opinion_modifier = { who = root modifier = opinion_obsession_country_very_bad_start }
		}
	}
	else_if = {
		limit = {
			event_target:obsessed_scientist_breakdown = {
				calc_true_if = {
					amount >= 2
					check_variable = { which = obsession_break_reason value = @breaking_reason_fired }
					check_variable = { which = obsession_break_reason value = @breaking_reason_denied }
					check_variable = { which = obsession_break_reason value = @breaking_reason_timeout }
					has_leader_flag = asked_who
					has_leader_flag = asked_crazy
					NOT = { has_leader_flag = asked_polite }
				}
			}
		}
		event_target:obsession_country = {
			add_opinion_modifier = { who = root modifier = opinion_obsession_country_bad_start }
		}
	}
	# amount = 1 leads to the neutral start.
	else_if = {
		limit = {
			event_target:obsessed_scientist_breakdown = {
				calc_true_if = {
					amount = 0
					check_variable = { which = obsession_break_reason value = @breaking_reason_fired }
					check_variable = { which = obsession_break_reason value = @breaking_reason_denied }
					check_variable = { which = obsession_break_reason value = @breaking_reason_timeout }
					has_leader_flag = asked_who
					has_leader_flag = asked_crazy
					NOT = { has_leader_flag = asked_polite }
				}
			}
		}
		event_target:obsession_country = {
			add_opinion_modifier = { who = root modifier = opinion_obsession_country_good_start }
		}
	}
}

# Called in situation scope.
check_obsession_break_success = {
	# Check called after at end of each stage of a leader break situation.
	remove_situation_flag = just_succeeded
	switch = {
		trigger = current_situation_approach
		obsessions_leader_break_spiritual = {
			if = {
				limit = {
					target = {
						OR = {
							has_trait = leader_trait_shroud_age
							has_trait = leader_trait_scientist_composer_chosen
							has_trait = leader_trait_scientist_instrument_chosen
							has_trait = leader_trait_scientist_whisperers_chosen
							has_trait = leader_trait_scientist_chosen
							has_trait = leader_trait_scientist_psionic
							has_trait = leader_trait_expertise_psionics
							has_trait = leader_trait_mindful
							is_specialist_society = yes
						}
					}
				}
				set_situation_flag = just_succeeded
			}
			set_situation_flag = spiritual_tried
		}
		obsessions_leader_break_logical = {
			if = {
				limit = {
					target = {
						OR = {
							has_trait = leader_trait_custom_AI_assistant
							has_trait = leader_trait_sapient_AI_assistant
							has_trait = leader_trait_spark_of_genius
							has_trait = leader_trait_meticulous
							has_trait = leader_trait_scientist_cyborg
							has_trait = leader_trait_scientist_erudite
							has_trait = leader_trait_scientist_synthetic
							is_specialist_physics = yes
						}
					}
				}
				set_situation_flag = just_succeeded
			}
			set_situation_flag = logical_tried
		}
		obsessions_leader_break_authority = {
			if = {
				limit = {
					target = {
						OR = {
							has_trait = leader_trait_paranoid
							has_trait = leader_trait_maniacal
							has_trait = leader_trait_expertise_military_theory
							has_trait = leader_trait_expertise_statecraft
							has_trait = leader_trait_resilient
							has_trait = leader_trait_substance_abuser
							has_trait = leader_trait_arrested_development
							has_trait = leader_trait_stubborn
							has_trait = leader_trait_mindful
						}
					}
				}
				set_situation_flag = just_succeeded
			}
			set_situation_flag = authority_tried
		}
		obsessions_leader_break_therapy = {
			if = {
				limit = {
					target = {
						OR = {
							has_trait = leader_trait_paranoid
							has_trait = leader_trait_maniacal
							has_trait = leader_trait_resilient
							has_trait = leader_trait_substance_abuser
							has_trait = leader_trait_arrested_development
							has_trait = leader_trait_stubborn
							has_trait = leader_trait_mindful
							has_trait = leader_trait_scientist_psionic
							has_trait = leader_trait_expertise_psionics
							has_trait = leader_trait_eager
							is_specialist_society = yes
						}
					}
				}
				set_situation_flag = just_succeeded
			}
			set_situation_flag = therapy_tried
		}
		obsessions_leader_break_meditation = {
			if = {
				limit = {
					target = {
						OR = {
							has_trait = leader_trait_spark_of_genius
							has_trait = leader_trait_maniacal
							has_trait = leader_trait_resilient
							has_trait = leader_trait_stubborn
							has_trait = leader_trait_mindful
							has_trait = leader_trait_scientist_psionic
							has_trait = leader_trait_expertise_psionics
							has_trait = leader_trait_archaeologist 
							has_trait = leader_trait_archaeologist_ancrel
							has_trait = leader_trait_adaptable
						}
					}
				}
				set_situation_flag = just_succeeded
			}
			set_situation_flag = meditation_tried
		}
		obsessions_leader_break_training = {
			if = {
				limit = {
					target = {
						OR = {
							has_trait = leader_trait_resilient
							has_trait = leader_trait_adaptable
							has_trait = leader_trait_eager
							is_specialist_engineer = yes
						}
					}
				}
				set_situation_flag = just_succeeded
			}
			set_situation_flag = training_tried
		}
		obsessions_leader_break_entertainment = {
			if = {
				limit = {
					target = {
						OR = {
							has_trait = leader_trait_carefree
							has_trait = leader_trait_adaptable
							has_trait = leader_trait_substance_abuser
							has_trait = leader_trait_eager
							has_trait = leader_trait_expertise_statecraft
							has_trait = leader_trait_expertise_computing
							is_specialist_engineer = yes
						}
					}
				}
				set_situation_flag = just_succeeded
			}
			set_situation_flag = entertainment_tried
		}
		obsessions_leader_break_companionship = {
			if = {
				# Companionship usually suceeds, it just has a few failure cases
				limit = {
					target = {
						NOR = {
							has_trait = leader_trait_scientist_erudite
							has_trait = leader_trait_scientist_synthetic
							has_trait = leader_trait_scientist_cyborg
							has_trait = leader_trait_paranoid
							has_trait = leader_trait_substance_abuser
							NOT = { is_same_species = this.owner }
						}
					}
				}
				set_situation_flag = just_succeeded
			}
			set_situation_flag = companionship_tried
		}
		obsessions_leader_break_realignment = {
			if = {
				limit = {
					target = {
						is_specialist_engineer = yes
						is_specialist_physics = yes
					}
				}
				set_situation_flag = just_succeeded
			}
			set_situation_flag = realignment_tried
		}
		obsessions_leader_break_synchronize = {
			if = {
				limit = {
					target = {
						OR = {
							is_specialist_society = yes
							is_survey_genius = yes
						}
					}
				}
				set_situation_flag = just_succeeded
			}
			set_situation_flag = synchronize_tried
		}
		obsessions_leader_break_shrug = {
			if = {
				# Shrug usually fails, except for advanced leaders.
				limit = {
					target = {
						OR = {
							has_trait = leader_trait_scientist_erudite
							has_trait = leader_trait_scientist_synthetic
							has_trait = leader_trait_scientist_cyborg
							has_trait = leader_trait_scientist_psionic
							has_trait = leader_trait_curator
							has_trait = leader_trait_carefree
						}
					}
				}
				set_situation_flag = just_succeeded
			}
			else = {
				# Shrug is the only one that gets a random chance.
				random_list = {
					1 = { set_situation_flag = just_succeeded }
					2 = {}
				}
			}
		}
		obsessions_leader_break_research = {
			set_situation_flag = just_succeeded
		}
	}
}