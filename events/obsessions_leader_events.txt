# Events for managing scientists who are currently obsessed.
namespace = obsessions_mod_scientist

@obsession_end_level = 7
@obsession_breaking_point = 5
@obsession_near_breaking_point = 4
@breaking_reason_none = 0
@breaking_reason_job_change = 1
@breaking_reason_fired = 2
@breaking_reason_denied = 3
@breaking_reason_timeout = 4
@breaking_reason_lifetime = 5
@breaking_reason_retraining = 6
@breaking_reason_situation = 7

@obsession_tiny_reward = 100
@obsession_minor_reward = 200
@obsession_major_reward = 500


# Unassigned from their job. Obsession increases one level.
# If they are immediately reassigned, it will go back down.
# Scope: Leader (just before unassignment)
leader_event = {
	id = obsessions_mod_scientist.1
	hide_window = yes
	is_triggered_only = yes

	# Check the flag, not the trait, in case the trait has been hidden.
	trigger = { has_leader_flag = obsession_obsessed }

	immediate = {
		# We don't increase their obsession here, but we will break if they are already near it.
		if = {
			limit = {
				NOT = { owner = { country_has_situation = { SITUATION = obsessions_situation_leader_break } } }
				check_variable = { which = obsession_level value >= @obsession_near_breaking_point }
			}
			owner = {
				save_global_event_target_as = obsession_source_country
			}
			set_variable = { which = obsession_break_reason value = @breaking_reason_job_change }
			leader_event = { id = obsessions_mod_scientist.6 days = 30 }
		}
	}
}

# Assigned to a job
# Scope: Leader (after assignment)
leader_event = {
	id = obsessions_mod_scientist.2
	hide_window = yes
	is_triggered_only = yes

	trigger = { has_leader_flag = obsession_obsessed }

	immediate = {
		# We don't increase their obsession here, but we will break if they are already near it.
		# Previously we would lower their obsession here, but that broke
		# when they were assigned without first being unassigned.
		if = {
			limit = {
				NOT = { owner = { country_has_situation = { SITUATION = obsessions_situation_leader_break } } }
				check_variable = { which = obsession_level value >= @obsession_near_breaking_point }
			}
			owner = {
				save_global_event_target_as = obsession_source_country
			}
			set_variable = { which = obsession_break_reason value = @breaking_reason_job_change }
			leader_event = { id = obsessions_mod_scientist.6 days = 30 }
		}
	}
}

# A leader leveled up.
# Scope = Country
# From = Leader
country_event = {
	id = obsessions_mod_scientist.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			has_leader_flag = obsession_obsessed
			NOT = { has_leader_flag = obsession_issued_project }
		}
	}

	immediate = {
		from = {
			if = {
				limit = {
					# Note that this event doesn't get called if the leader leveled up with add_skill,
					# only when it happens with experience, so this may not happen until @obsession_end_level+1, etc.
					has_skill >= @obsession_end_level
				}
				owner ={
					# Their obsession is ready to come to an end, issue the special project.
					country_event = { id = obsessions_mod_scientist.9 scopes = { from = from } }
				}
			}
		}
	}
}

# A leader fired.
# Scope = Country
# From = Leader
country_event = {
	id = obsessions_mod_scientist.4
	hide_window = yes
	is_triggered_only = yes

	trigger = { from = { has_leader_flag = obsession_obsessed } }

	immediate = {
		save_global_event_target_as = obsession_source_country

		if = {
			limit = {
				OR = {
					owner = { country_has_situation = { SITUATION = obsessions_situation_leader_break } }
					from = { has_leader_flag = second_chance }
				}
			}
			# If they are fired during the situation or have already been given a second chance,
			# then no recourse given and we go straight to the breakdown.
			from = {
				set_variable = { which = obsession_level value = @obsession_breaking_point }
				set_variable = { which = obsession_break_reason value = @breaking_reason_fired }
				leader_event = { id = obsessions_mod_scientist.6 }
			}
		}
		else = {
			country_event = { id = obsessions_mod_scientist.30 scopes = { from = from } }
		}
	}
}

# A leader died.
# Scope = Country
# From = Leader
country_event = {
	id = obsessions_mod_scientist.5
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			has_leader_flag = obsession_obsessed
			# If they die after their special project is issued, too bad.
			# Nobody will take up their obsession, so the project will time out.
			NOT = { has_leader_flag = obsession_issued_project }
		}
	}

	immediate = {
		save_global_event_target_as = obsession_source_country
		# If an obsessed leader dies, a junior scientist usually "finds their notes" after their funeral
		from = {
			save_global_event_target_as = obsessed_scientist_dead
			exile_leader_as = obsessed_scientist_dead
		}
		country_event = { id = obsessions_mod_scientist.7 days = 30 }
	}
}

# Breaking point!
leader_event = {
	id = obsessions_mod_scientist.6
	hide_window = yes
	is_triggered_only = yes

	# Check to make sure they are still a scientist. We don't break scientists if they have
	# become the country ruler.
	immediate = {
		if = {
			limit = {
				leader_class = scientist
				NOT = { check_variable = { which = obsession_break_reason value = @breaking_reason_none } }
			}
			if = {
				limit = {
					OR = {
						check_variable = { which = obsession_break_reason value = @breaking_reason_retraining }
						check_variable = { which = obsession_break_reason value = @breaking_reason_job_change }
						check_variable = { which = obsession_break_reason value = @breaking_reason_lifetime }
					}
				}
				# Fixable with a Situation. If they are already in the situation, don't fire a duplicate.
				if = {
					limit = { NOT = { owner = { country_has_situation = { SITUATION = obsessions_situation_leader_break } } } }
					event_target:obsession_source_country = {
						country_event = { id = obsessions_mod_scientist.20 scopes = { from = root } }
					}
				}
			}
			else = {
				# Final break
				# Abort the ongoing break situation if it exists.
				owner = {
					every_situation = {
						limit = { is_situation_type = obsessions_situation_leader_break }
						abort_situation = this
					}
				}
				species = {
					save_global_event_target_as = obsessed_scientist_species
				}
				event_target:obsession_source_country = {
					# Inform the owner of their disappearance.
					country_event = { id = obsessions_mod_scientist.12 days = 1 }
				}
				# If they were fired, they'll be killed and garbage collected so we have
				# to make a copy of them here. For simplicity we do this regardless of 
				# how the scientist broke.
				save_global_event_target_as = obsessed_scientist_breakdown_original
				owner = {
					clone_leader = {
						target = event_target:obsessed_scientist_breakdown_original
						effect = {
							set_leader_flag = obsession_breakdown
							set_variable = {
								which = obsession_break_reason
								value = event_target:obsessed_scientist_breakdown_original.obsession_break_reason
							}
							exile_leader_as = obsessed_scientist_breakdown
							save_global_event_target_as = obsessed_scientist_breakdown
						}
					}
				}

				# We exile the original too, just for easier debugging.
				remove_leader_flag = obsession_obsessed
				set_leader_flag = obsession_breakdown
				exile_leader_as = obsessed_scientist_breakdown_original

				event_target:obsessions_planet_target = {
					planet_event = {
						id = obsessions_mod_scientist.13
						days = 720
						scopes = { from = event_target:obsessed_scientist_breakdown }
					}
				}
			}
		}
	}
}

# Post funeral event transferring obsession
country_event = {
	id = obsessions_mod_scientist.7
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		random_owned_leader = {
			limit = {
				leader_class = scientist
				has_skill <= 4
				leader_age <= 60
				NOT = { has_leader_flag = obsession_obsessed }
			}
			# This scientist found their notes and will inherit the dead leader's obsession
			save_event_target_as = inheriting_scientist
		}
		country_event = {
			id = obsessions_mod_scientist.8
			scopes = { from = event_target:inheriting_scientist fromfrom = event_target:obsessed_scientist_dead }
		}
	}
}

# A new leader found the notes and got obsessed.
# from = inheriting scientist
# fromfrom = dead scientist
country_event = {
	id = obsessions_mod_scientist.8
	is_triggered_only = yes
	title = "obsessions_mod_scientist.8.name"
	desc = "obsessions_mod_scientist.8.desc"
	picture = GFX_evt_space_funeral
	show_sound = event_life_support_fail

	immediate = {
		from = {
			add_trait = leader_trait_obsessed_1
			set_leader_flag = obsession_obsessed
			set_variable = { which = obsession_level value = 1 }
			add_experience = @obsession_major_reward
			if = {
				limit = { is_idle = yes }
				change_variable = { which = obsession_level value = 1 }
			}
			owner = {
				country_event = { id = obsessions_mod_scientist.14 days = 1800 scopes = { from = from } }
			}
		}
	}

	option = {
		name = obsessions_mod_scientist.8.a
		# We already gave them the trait above, but show it in the tooltip.
		tooltip = {
			from = {
				add_trait = leader_trait_obsessed_1
			}
		}
	}
}

# An obsessed leader has reached the skill level necessary to end their obsession.
# from = obsessed scientist
country_event = {
	id = obsessions_mod_scientist.9
	is_triggered_only = yes
	title = "obsessions_mod_scientist.9.name"
	desc = "obsessions_mod_scientist.9.desc"
	picture = GFX_evt_bribery
	show_sound = event_conversation
	

	immediate = {
		from = {
			# Zero out any pending breaks and make it hard to hit a new break while the project is active.
			set_variable = { which = obsession_level value = 0 }
			set_variable = { which = obsession_break_reason value = @breaking_reason_none }
			set_leader_flag = obsession_issued_project
		}
		every_situation = {
			limit = { is_situation_type = obsessions_situation_leader_break }
			abort_situation = this
		}
	}

	option = {
		name = obsessions_mod_scientist.9.a
		allow = {
			resource_stockpile_compare = {
				resource = energy
				value >= 1000
			}
		}
		add_resource = { energy = -1000 }
		if = {
			limit = { event_target:obsessions_planet_target = { has_planet_flag = obsession_alpine } }
			enable_special_project = {
				name = "OBSESSIONS_MOD_FULFILL_OBSESSION_PROJECT_ALPINE"
				location = event_target:obsessions_planet_target
				owner = root.owner
			}
		}
		else_if = {
			limit = { event_target:obsessions_planet_target = { has_planet_flag = obsession_arctic } }
			enable_special_project = {
				name = "OBSESSIONS_MOD_FULFILL_OBSESSION_PROJECT_ARCTIC"
				location = event_target:obsessions_planet_target
				owner = root.owner
			}
		}
		else_if = {
			limit = { event_target:obsessions_planet_target = { has_planet_flag = obsession_tundra } }
			enable_special_project = {
				name = "OBSESSIONS_MOD_FULFILL_OBSESSION_PROJECT_TUNDRA"
				location = event_target:obsessions_planet_target
				owner = root.owner
			}
		}
		else_if = {
			limit = { event_target:obsessions_planet_target = { has_planet_flag = obsession_ocean } }
			enable_special_project = {
				name = "OBSESSIONS_MOD_FULFILL_OBSESSION_PROJECT_OCEAN"
				location = event_target:obsessions_planet_target
				owner = root.owner
			}
		}
		else_if = {
			limit = { event_target:obsessions_planet_target = { has_planet_flag = obsession_continental } }
			enable_special_project = {
				name = "OBSESSIONS_MOD_FULFILL_OBSESSION_PROJECT_CONTINENTAL"
				location = event_target:obsessions_planet_target
				owner = root.owner
			}
		}
		else_if = {
			limit = { event_target:obsessions_planet_target = { has_planet_flag = obsession_tropical } }
			enable_special_project = {
				name = "OBSESSIONS_MOD_FULFILL_OBSESSION_PROJECT_TROPICAL"
				location = event_target:obsessions_planet_target
				owner = root.owner
			}
		}
		else_if = {
			limit = { event_target:obsessions_planet_target = { has_planet_flag = obsession_savannah } }
			enable_special_project = {
				name = "OBSESSIONS_MOD_FULFILL_OBSESSION_PROJECT_SAVANNAH"
				location = event_target:obsessions_planet_target
				owner = root.owner
			}
		}
		else_if = {
			limit = { event_target:obsessions_planet_target = { has_planet_flag = obsession_arid } }
			enable_special_project = {
				name = "OBSESSIONS_MOD_FULFILL_OBSESSION_PROJECT_ARID"
				location = event_target:obsessions_planet_target
				owner = root.owner
			}
		}
		else_if = {
			limit = { event_target:obsessions_planet_target = { has_planet_flag = obsession_desert } }
			enable_special_project = {
				name = "OBSESSIONS_MOD_FULFILL_OBSESSION_PROJECT_DESERT"
				location = event_target:obsessions_planet_target
				owner = root.owner
			}
		}
		else = {
			# Nothing should hit the generic one anymore, but leave it as a fallback.
			enable_special_project = {
				name = "OBSESSIONS_MOD_FULFILL_OBSESSION_PROJECT"
				location = event_target:obsessions_planet_target
				owner = root.owner
			}
		}
	}

	# Reject the Special Project. Bad idea...
	option = {
		name = obsessions_mod_scientist.9.b
		hidden_effect = {
			save_global_event_target_as = obsession_source_country
			from = {
				set_variable = { which = obsession_level value = @obsession_breaking_point }
				set_variable = { which = obsession_break_reason value = @breaking_reason_denied }
				leader_event = { id = obsessions_mod_scientist.6 days = 1 }
			}
		}
	}
}

# Special Project completed.
ship_event = {
	id = obsessions_mod_scientist.10
	title = "obsessions_mod_scientist.10.name"
	desc = "obsessions_mod_scientist.10.desc"
	picture = GFX_evt_grand_speech
	show_sound = event_conversation
	location = event_target:obsessions_planet_target
	is_triggered_only = yes
	auto_opens = yes
	
	immediate = {
		leader = {
			remove_leader_flag = obsession_obsessed
			set_variable = { which = obsession_level value = 0 }
			set_variable = { which = obsession_break_reason value = 0 }
		}
	}

	# It's finally over, Mr. Frodo.
	option = {
		name = obsessions_mod_scientist.10.a
		leader = {
			add_experience = @obsession_major_reward
			remove_trait_effect = { TRAIT = leader_trait_obsessed_1 }
			add_trait = leader_trait_obsession_fulfilled
		}
	}

}

# Special Project timed out!
# Scope = Country
country_event = {
	id = obsessions_mod_scientist.11
	hide_window = yes
	is_triggered_only = yes

	trigger = { from = { has_leader_flag = obsession_obsessed } }

	immediate = {
		# Project timeout always causes them to break immediately.
		save_global_event_target_as = obsession_source_country
		random_owned_leader = {
			limit = { has_leader_flag = obsession_obsessed }
			set_variable = { which = obsession_level value = @obsession_breaking_point }
			set_variable = { which = obsession_break_reason value = @breaking_reason_timeout }
			leader_event = { id = obsessions_mod_scientist.6 days = 1 }
		}
	}
}

# An obsessed leader has disappeared
country_event = {
	id = obsessions_mod_scientist.12
	is_triggered_only = yes
	title = "obsessions_mod_scientist.12.name"
	
	picture = GFX_evt_worrying_signal
	show_sound = event_conversation

	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				check_variable = {
					which = obsession_break_reason
					value = @breaking_reason_job_change
				}
			}
		}
		text = "obsessions_mod_scientist.12.desc_job"
	}

	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				check_variable = {
					which = obsession_break_reason
					value = @breaking_reason_fired
				}
			}
		}
		text = "obsessions_mod_scientist.12.desc_fired"
	}

	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				check_variable = {
					which = obsession_break_reason
					value = @breaking_reason_denied
				}
			}
		}
		text = "obsessions_mod_scientist.12.desc_denied"
	}

	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				check_variable = {
					which = obsession_break_reason
					value = @breaking_reason_timeout
				}
			}
		}
		text = "obsessions_mod_scientist.12.desc_timeout"
	}

	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				check_variable = {
					which = obsession_break_reason
					value = @breaking_reason_situation
				}
			}
		}
		text = "obsessions_mod_scientist.12.desc_situation"
	}

	desc = { text = "obsessions_mod_scientist.12.desc" }

	option = {
		name = obsessions_mod_scientist.12.a
	}
}

# Punishment event. The player failed to contain the scientist's obsession and they have
# escaped and gone to the planet.
planet_event = {
	hide_window = yes
	is_triggered_only = yes
	id = obsessions_mod_scientist.13

	immediate = {
		# Give warning to the source country that something is coming.
		event_target:obsession_source_country = {
			country_event = { id = obsessions_mod_scientist.31 scopes = { from = root } }
		}
	}
	
}

# Looping event to ramp up a scientists's obsession level
# from = scientist
country_event = {
	id = obsessions_mod_scientist.14
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		if = {
			limit = {
				exists = from
				from ={
					has_leader_flag = obsession_obsessed
					NOT = { has_trait = leader_trait_obsession_fulfilled }
				}
				from = {
					check_variable = { which = obsession_level value < @obsession_breaking_point }
					check_variable = { which = obsession_level value > 0 }
				}
			}
			country_event = { id = obsessions_mod_scientist.15 scopes = { from = from } }
			country_event = { id = obsessions_mod_scientist.14 days = 1800 scopes = { from = from } }
		}
	}
}

country_event = {
	id = obsessions_mod_scientist.15
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# Only trigger one of these if they are not currently in a break situation.
		if = {
			limit = { NOT = { owner = { country_has_situation = { SITUATION = obsessions_situation_leader_break } } } }
			# Pick a ramp up obsession level.
			random_list = {
				1 = {
					# Silently increase their level.
					country_event = { id = obsessions_mod_scientist.16 scopes = { from = from } }
				}
				2 = {
					# Silently increase their level if they are idle.
					country_event = { id = obsessions_mod_scientist.19 scopes = { from = from } }
				}
				10 = {
					modifier = {
						factor = 0
						from = {
							OR = {
								has_trait = leader_trait_custom_AI_assistant
								has_trait = leader_trait_sapient_AI_assistant
								owner = {
									OR = {
										has_authority = "auth_hive_mind"
										has_authority = "auth_machine_intelligence"
										has_policy_flag = ai_outlawed
									}
								}
							}
						}
					}
					# Give them an AI assistant
					country_event = { id = obsessions_mod_scientist.17 scopes = { from = from } }
				}
				10 = {
					modifier = {
						factor = 0
						from = {
							has_leader_flag = obsession_retrained
						}
					}
					# Send them for retraining
					country_event = { id = obsessions_mod_scientist.18 scopes = { from = from } }
				}
			}
		}
	}
}

country_event = {
	id = obsessions_mod_scientist.16
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		from = {
			add_experience = @obsession_minor_reward
			change_variable = { which = obsession_level value = 1 }
			if = {
				limit = { check_variable = { which = obsession_level value >= @obsession_breaking_point } }
				owner = {
					save_global_event_target_as = obsession_source_country
				}
				set_variable = { which = obsession_break_reason value = @breaking_reason_lifetime }
				leader_event = { id = obsessions_mod_scientist.6 days = 30 }
			}
		}
	}
}

country_event = {
	id = obsessions_mod_scientist.17
	is_triggered_only = yes
	title = "obsessions_mod_scientist.17.name"
	desc = "obsessions_mod_scientist.17.desc"
	picture = GFX_evt_bribery
	show_sound = event_conversation


	# Give them an assistant
	option = {
		name = obsessions_mod_scientist.17.a
		allow = {
			resource_stockpile_compare = {
				resource = energy
				value >= 1000
			}
		}
		add_resource = { energy = -1000 }
		from = {
			add_trait = leader_trait_custom_AI_assistant
		}
	}

	# Reject the idea.
	option = {
		name = obsessions_mod_scientist.17.b
		hidden_effect = {
			from = {
				change_variable = { which = obsession_level value = 1 }
				if = {
					limit = { check_variable = { which = obsession_level value >= @obsession_breaking_point } }
					owner = {
						save_global_event_target_as = obsession_source_country
					}
					set_variable = { which = obsession_break_reason value = @breaking_reason_lifetime }
					leader_event = { id = obsessions_mod_scientist.6 days = 30 }
				}
			}
		}
	}
}

country_event = {
	id = obsessions_mod_scientist.18
	is_triggered_only = yes
	title = "obsessions_mod_scientist.18.name"
	desc = "obsessions_mod_scientist.18.desc"
	picture = GFX_evt_bribery
	show_sound = event_conversation

	immediate = {
		from = {
			set_leader_flag = obsession_retrained
		}
	}

	# Send them for retraining, actually a bad idea.
	option = {
		trigger = {
			is_egalitarian = no
		}
		name = obsessions_mod_scientist.18.a
		allow = {
			resource_stockpile_compare = {
				resource = energy
				value >= 1000
			}
		}
		add_resource = { energy = -1000 }
		hidden_effect = {
			from = {
				add_experience = @obsession_minor_reward
				change_variable = { which = obsession_level value = 1 }
				if = {
					limit = { check_variable = { which = obsession_level value >= @obsession_breaking_point } }
					owner = {
						save_global_event_target_as = obsession_source_country
					}
					set_variable = { which = obsession_break_reason value = @breaking_reason_retraining }
					leader_event = { id = obsessions_mod_scientist.6 days = 30 }
				}
			}
		}
	}

	# Egalitarian option
	option = {
		trigger = {
			is_egalitarian = yes
		}
		name = obsessions_mod_scientist.18.b
		allow = {
			resource_stockpile_compare = {
				resource = energy
				value >= 1000
			}
		}
		add_resource = { energy = -1000 }
		hidden_effect = {
			from = {
				add_experience = @obsession_minor_reward
			}
		}
	}

	# Reject the idea.
	option = {
		name = obsessions_mod_scientist.18.c
		hidden_effect = {
			from = {
				add_experience = @obsession_tiny_reward
			}
		}
	}
}

country_event = {
	id = obsessions_mod_scientist.19
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		from = {
			add_experience = @obsession_tiny_reward
			if = {
				limit = { is_idle = yes }
				change_variable = { which = obsession_level value = 1 }
			}
			if = {
				limit = { check_variable = { which = obsession_level value >= @obsession_breaking_point } }
				owner = {
					save_global_event_target_as = obsession_source_country
				}
				set_variable = { which = obsession_break_reason value = @breaking_reason_lifetime }
				leader_event = { id = obsessions_mod_scientist.6 days = 30 }
			}
		}
	}
}

# Start Situation
country_event = {
	id = obsessions_mod_scientist.20
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		start_situation = {
			type = obsessions_situation_leader_break
			target = from
			effect = {
				save_event_target_as = new_situation
				set_situation_locked = yes # Unlocked after obsessions_mod_scientist.21
			}
		}
		from = {
			save_global_event_target_as = obsessions_breaking_scientist
		}
		event_target:new_situation = {
			situation_event = { id = obsessions_mod_scientist.21 }
		}
	}
}


situation_event = {
	id = obsessions_mod_scientist.21
	title = "obsessions_mod_scientist.21.name"
	desc = "obsessions_mod_scientist.21.desc"
	picture = GFX_evt_acquire_asset
	is_triggered_only = yes
	situation = this

	after = {
		set_situation_locked = no
	}
	# This event is used as the base for the other two stages, so the options have to all exist
	# here and be inheritable.
	option = {
		trigger = {
			target.owner = { is_spiritualist = yes }
			NOT = { has_situation_flag = spiritual_tried }
		}
		name = obsessions_mod_scientist.21.a
		custom_tooltip = obsessions_leader_break_spiritual_tooltip
		set_situation_approach = obsessions_leader_break_spiritual
	}
	option = {
		trigger = {
			target.owner = { is_materialist = yes }
			NOT = { has_situation_flag = logical_tried }
		}
		name = obsessions_mod_scientist.21.b
		custom_tooltip = obsessions_leader_break_logical_tooltip
		set_situation_approach = obsessions_leader_break_logical
	}
	option = {
		trigger = {
			target.owner = { is_authoritarian = yes }
			NOT = { has_situation_flag = authority_tried }
		}
		name = obsessions_mod_scientist.21.c
		custom_tooltip = obsessions_leader_break_authority_tooltip
		set_situation_approach = obsessions_leader_break_authority
	}
	option = {
		trigger = {
			target.owner = { is_egalitarian = yes }
			NOT = { has_situation_flag = therapy_tried }
		}
		name = obsessions_mod_scientist.21.d
		custom_tooltip = obsessions_leader_break_therapy_tooltip
		set_situation_approach = obsessions_leader_break_therapy
	}
	option = {
		trigger = {
			target.owner = { is_pacifist = yes }
			NOT = { has_situation_flag = meditation_tried }
		}
		name = obsessions_mod_scientist.21.e
		custom_tooltip = obsessions_leader_break_meditation_tooltip
		set_situation_approach = obsessions_leader_break_meditation
	}
	option = {
		trigger = {
			target.owner = { is_militarist = yes }
			NOT = { has_situation_flag = training_tried }
		}
		name = obsessions_mod_scientist.21.f
		custom_tooltip = obsessions_leader_break_training_tooltip
		set_situation_approach = obsessions_leader_break_training
	}
	option = {
		trigger = {
			target.owner = { is_xenophile = yes }
			NOT = { has_situation_flag = entertainment_tried }
		}
		name = obsessions_mod_scientist.21.g
		custom_tooltip = obsessions_leader_break_entertainment_tooltip
		set_situation_approach = obsessions_leader_break_entertainment
	}
	option = {
		trigger = {
			target.owner = { is_xenophobe = yes }
			NOT = { has_situation_flag = companionship_tried }
		}
		name = obsessions_mod_scientist.21.h
		custom_tooltip = obsessions_leader_break_companionship_tooltip
		set_situation_approach = obsessions_leader_break_companionship
	}
	option = {
		trigger = {
			target.owner = { is_gestalt = yes }
			NOT = { has_situation_flag = realignment_tried }
		}
		name = obsessions_mod_scientist.21.i
		custom_tooltip = obsessions_leader_break_realignment_tooltip
		set_situation_approach = obsessions_leader_break_realignment
	}
	option = {
		trigger = {
			target.owner = { is_gestalt = yes }
			NOT = { has_situation_flag = synchronize_tried }
		}
		name = obsessions_mod_scientist.21.j
		custom_tooltip = obsessions_leader_break_synchronize_tooltip
		set_situation_approach = obsessions_leader_break_synchronize
	}
	option = {
		name = obsessions_mod_scientist.21.k
		custom_tooltip = obsessions_leader_break_shrug_tooltip
		set_situation_approach = obsessions_leader_break_shrug
	}
	option = {
		trigger = {
			current_stage = stage_3
		}
		name = obsessions_mod_scientist.21.l
		custom_tooltip = obsessions_leader_break_research_tooltip
		set_situation_approach = obsessions_leader_break_research
	}
}

# Situation First Stage Complete
situation_event = {
	id = obsessions_mod_scientist.22
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		set_situation_locked = yes # Unlocked after obsessions_mod_scientist.23
		check_obsession_break_success = yes
		if = {
			limit = { NOT = { has_situation_flag = just_succeeded } }
			change_variable = { which = failure_count value = 1 }
		}
		situation_event = {
			id = obsessions_mod_scientist.23
		}
	}
}

situation_event = {
	id = obsessions_mod_scientist.23
	is_triggered_only = yes
	base = obsessions_mod_scientist.21
	desc_clear = yes
	title = "obsessions_mod_scientist.23.name"
	situation = this

	desc = {
		exclusive_trigger = {
			has_situation_flag = just_succeeded
		}
		text = "obsessions_mod_scientist.23.desc_success"
	}
	desc = "obsessions_mod_scientist.23.desc"

	after = {
		# We don't leave it locked, even though we probably should to avoid users
		# cheesing the choices, because it nicer to let them change their mind.
		set_situation_locked = no
	}

	# Options are all inherited.
}

# Situation Second Stage Complete
situation_event = {
	id = obsessions_mod_scientist.24
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		set_situation_locked = yes # Unlocked after obsessions_mod_scientist.25
		check_obsession_break_success = yes
		if = {
			limit = { NOT = { has_situation_flag = just_succeeded } }
			change_variable = { which = failure_count value = 1 }
		}
		situation_event = {
			id = obsessions_mod_scientist.25
		}
	}
}

situation_event = {
	id = obsessions_mod_scientist.25
	is_triggered_only = yes
	base = obsessions_mod_scientist.21
	desc_clear = yes
	title = "obsessions_mod_scientist.25.name"
	situation = this

	desc = {
		exclusive_trigger = {
			check_variable = {
				which = failure_count
				value >= 2
			}
		}
		text = "obsessions_mod_scientist.25.desc_danger"
	}
	desc = {
		exclusive_trigger = {
			has_situation_flag = just_succeeded
		}
		text = "obsessions_mod_scientist.25.desc_success"
	}
	desc = "obsessions_mod_scientist.25.desc"

	after = {
		# We don't leave it locked, even though we probably should to avoid users
		# cheesing the choices, because it nicer to let them change their mind.
		set_situation_locked = no
	}

	# Options are all inherited.
}

# Situation Complete
situation_event = {
	id = obsessions_mod_scientist.26
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		check_obsession_break_success = yes
		if = {
			limit = { NOT = { has_situation_flag = just_succeeded } }
			change_variable = { which = failure_count value = 1 }
		}
		situation_event = {
			id = obsessions_mod_scientist.27
		}
	}
}

situation_event = {
	id = obsessions_mod_scientist.27
	title = "obsessions_mod_scientist.27.name"
	picture = GFX_evt_acquire_asset
	is_triggered_only = yes
	situation = this

	desc = {
		exclusive_trigger = {
			check_variable = {
				which = failure_count
				value >= 3
			}
		}
		text = "obsessions_mod_scientist.27.desc_fail"
	}
	desc = {
		exclusive_trigger = {
			check_variable = {
				which = failure_count
				value = 2
			}
		}
		text = "obsessions_mod_scientist.27.desc_barely"
	}
	desc = {
		exclusive_trigger = {
			check_variable = {
				which = failure_count
				value = 1
			}
		}
		text = "obsessions_mod_scientist.27.desc_decent"
	}
	desc = "obsessions_mod_scientist.27.desc"

	immediate = {
		if = {
			limit = {
				check_variable = {
					which = failure_count
					value >= 3
				}
			}
			# They break!
			target = {
				owner = {
					save_global_event_target_as = obsession_source_country
				}
				set_variable = { which = obsession_break_reason value = @breaking_reason_situation }
				leader_event = { id = obsessions_mod_scientist.6 days = 30 }
			}
		}
		else = {
			# Reset their obsession level.
			target = {
				change_variable = { which = obsession_level value = -4 }
			}
		}
	}
	after = {
		destroy_situation = this
	}

	option = {
		exclusive_trigger = {
			check_variable = {
				which = failure_count
				value >= 3
			}
		}
		name = obsessions_mod_scientist.27.a
	}

	option = {
		exclusive_trigger = {
			check_variable = {
				which = failure_count
				value = 2
			}
		}
		target = {
			add_experience = @obsession_major_reward
		}
		name = obsessions_mod_scientist.27.b
	}

	option = {
		exclusive_trigger = {
			check_variable = {
				which = failure_count
				value = 1
			}
		}
		target = {
			add_experience = @obsession_major_reward
		}
		# These multipliers are based off of last months numbers, which includes
		# the debuff from the research approach, so we adjust the numbers for the debuff.
		
		if = {
			limit = { current_situation_approach = obsessions_leader_break_research }
			target.owner = {
				add_monthly_resource_mult = {
					resource = society_research
					value = 30
					min = @tier1researchmin
					max = @tier1researchmax
				}
				add_monthly_resource_mult = {
					resource = engineering_research
					value = 30
					min = @tier1researchmin
					max = @tier1researchmax
				}
				add_monthly_resource_mult = {
					resource = physics_research
					value = 30
					min = @tier1researchmin
					max = @tier1researchmax
				}
			}
		}
		else = {
			target.owner = {
				add_monthly_resource_mult = {
					resource = society_research
					value = @tier1researchreward
					min = @tier1researchmin
					max = @tier1researchmax
				}
				add_monthly_resource_mult = {
					resource = engineering_research
					value = @tier1researchreward
					min = @tier1researchmin
					max = @tier1researchmax
				}
				add_monthly_resource_mult = {
					resource = physics_research
					value = @tier1researchreward
					min = @tier1researchmin
					max = @tier1researchmax
				}
			}
		}
		name = obsessions_mod_scientist.27.c
	}

	option = {
		name = obsessions_mod_scientist.27.d
		target = {
			add_experience = @obsession_major_reward
		}
		
		# These multipliers are based off of last months numbers, which includes
		# the debuff from the research approach, so we adjust the numbers for the debuff.
		if = {
			limit = { current_situation_approach = obsessions_leader_break_research }
			target.owner = {
				add_monthly_resource_mult = {
					resource = society_research
					value = 120
					min = @tier3researchmin
					max = 25000
				}
				add_monthly_resource_mult = {
					resource = engineering_research
					value = 120
					min = @tier3researchmin
					max = 25000
				}
				add_monthly_resource_mult = {
					resource = physics_research
					value = 120
					min = @tier3researchmin
					max = 25000
				}
			}
		}
		else = {
			target.owner = {
				add_monthly_resource_mult = {
					resource = society_research
					value = @tier3researchreward
					min = @tier3researchmin
					max = @tier3researchmax
				}
				add_monthly_resource_mult = {
					resource = engineering_research
					value = @tier3researchreward
					min = @tier3researchmin
					max = @tier3researchmax
				}
				add_monthly_resource_mult = {
					resource = physics_research
					value = @tier3researchreward
					min = @tier3researchmin
					max = @tier3researchmax
				}
			}
		}
	}
}


# A leader fired.
# Scope = Country
# From = Leader
country_event = {
	id = obsessions_mod_scientist.30
	title = "obsessions_mod_scientist.30.name"
	desc = "obsessions_mod_scientist.30.desc"
	picture = GFX_evt_acquire_asset
	is_triggered_only = yes

	immediate = {
		save_global_event_target_as = obsession_source_country
	}

	option = {
		name = obsessions_mod_scientist.30.a
		custom_tooltip = obsessions_mod_scientist.30.a.tooltip
		add_resource = {
			# A straight up bribe to the user to keep their obsessed scientist around,
			# so they don't miss all the awesome content in this mod.
			unity = 500
		}
		hidden_effect = {
			clone_leader = {
				target = from
				effect = {
					set_leader_flag = obsession_obsessed
					set_leader_flag = second_chance
					set_variable = { which = obsession_level value = 3 }
					save_event_target_as = rehired_scientist
				}
			}
			if = {
				limit = { from = { has_leader_flag = obsession_retrained } }
				event_target:rehired_scientist = { set_leader_flag = obsession_retrained }
			}
			owner = {
				country_event = { id = obsessions_mod_scientist.14 days = 1800 scopes = { from = event_target:rehired_scientist } }
			}
		}
	}

	option = {
		name = obsessions_mod_scientist.30.b
		hidden_effect = {
			from = {
				set_variable = { which = obsession_level value = @obsession_breaking_point }
				set_variable = { which = obsession_break_reason value = @breaking_reason_fired }
				leader_event = { id = obsessions_mod_scientist.6 }
			}
		}
	}
}


# From = Planet
country_event = {
	id = obsessions_mod_scientist.31
	title = "obsessions_mod_scientist.31.name"
	desc = "obsessions_mod_scientist.31.desc"
	picture = GFX_evt_fleet_neutral
	is_triggered_only = yes

	option = {
		name = obsessions_mod_scientist.31.a
		custom_tooltip = obsessions_mod_scientist.31.a.tooltip
		hidden_effect = {
			country_event = { id = obsessions_mod_scientist.32 days = 45 scopes = { from = from } }
		}
	}

	option = {
		name = obsessions_mod_scientist.31.b
		country_event = { id = obsessions_mod_scientist.33 scopes = { from = from } }
	}
}



country_event = {
	id = obsessions_mod_scientist.32
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# Spawn Obsession country and set things up for communications with source country
		# This is the version that happens if the player ignores them.

		# Check to ensure the planet is habitable. It should be since obsession planets always are,
		# but something might have happened to render it uninhabitable. If that happened, spawn a pirate
		# fleet with the obsessed scientist as the admiral.
		if = {
			limit = {
				from = { is_colonizable = no }
			}
			create_obsessed_pirate_king = yes
		}
		# For all other cases we currently have the obsessed just take over the system/colony.
		else = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				event_target:obsession_country = {
					add_opinion_modifier = { who = root modifier = opinion_obsession_country_very_bad_start }
					if = {
						limit = {
							exists = event_target:old_owner
						}
						declare_war = {
							target = event_target:old_owner
							name = {
								key = "NAME_Obsession_War"
							}
							attacker_war_goal = "wg_independence"
						}
					}
				}
			}
		}
	}
}


# From = Planet
country_event = {
	id = obsessions_mod_scientist.33
	title = "obsessions_mod_scientist.33.name"
	desc = "obsessions_mod_scientist.33.desc"
	location = from
	is_triggered_only = yes
	diplomatic = yes
	diplomatic_title = BLANK_STRING

	picture_event_data = {
		portrait = event_target:obsessed_scientist_breakdown
		room = "ethic_spaceship_room"
	}

	option = { # Who are you?
		name = obsessions_mod_scientist.33.a
		is_dialog_only = yes
		response_text = obsessions_mod_scientist.33.a.response
		hidden_effect = {
			event_target:obsessed_scientist_breakdown = {
				set_leader_flag = asked_who
			}
		}
	}

	option = { # Are you crazy?
		name = obsessions_mod_scientist.33.b
		is_dialog_only = yes
		response_text = obsessions_mod_scientist.33.b.response
		hidden_effect = {
			event_target:obsessed_scientist_breakdown = {
				set_leader_flag = asked_crazy
			}
		}
	}

	option = { # Glad to see you again
		name = obsessions_mod_scientist.33.c
		hidden_effect = {
			event_target:obsessed_scientist_breakdown = {
				set_leader_flag = asked_polite
			}
			country_event = { id = obsessions_mod_scientist.34 scopes = { from = from } }
		}
	}

	option = { # What do you want.
		name = obsessions_mod_scientist.33.d
		hidden_effect = {
			country_event = { id = obsessions_mod_scientist.34 scopes = { from = from } }
		}
	}
}

country_event = {
	id = obsessions_mod_scientist.34
	title = "obsessions_mod_scientist.34.name"
	location = from
	is_triggered_only = yes
	diplomatic = yes
	diplomatic_title = BLANK_STRING

	picture_event_data = {
		portrait = event_target:obsessed_scientist_breakdown
		room = "ethic_spaceship_room"
	}

	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = asked_polite
				has_leader_flag = asked_who
				has_leader_flag = asked_crazy
			}
		}
		text = "obsessions_mod_scientist.34.desc_polite_who_crazy"
	}
	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = asked_polite
				NOT = { has_leader_flag = asked_who }
				has_leader_flag = asked_crazy
			}
		}
		text = "obsessions_mod_scientist.34.desc_polite_crazy"
	}
	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = asked_polite
				has_leader_flag = asked_who
				NOT = { has_leader_flag = asked_crazy }
			}
		}
		text = "obsessions_mod_scientist.34.desc_polite_who"
	}
	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = asked_polite
				NOT = { has_leader_flag = asked_who }
				NOT = { has_leader_flag = asked_crazy }
			}
		}
		text = "obsessions_mod_scientist.34.desc_polite"
	}
	desc = "obsessions_mod_scientist.34.desc"

	option = {
		trigger = {
			from = { is_colonizable = no }
		}
		name = obsessions_mod_scientist.34.a
		hidden_effect = {
			country_event = { id = obsessions_mod_scientist.35 scopes = { from = from } }
		}
	}

	option = {
		trigger = {
			from = {
				is_colonizable = yes
				is_colony = no
				exists = solar_system.starbase
				solar_system.starbase.owner = { is_same_value = root.owner }
			}
		}
		name = obsessions_mod_scientist.34.b
		hidden_effect = {
			country_event = { id = obsessions_mod_scientist.36 scopes = { from = from } }
		}
	}

	option = {
		trigger = {
			from = {
				is_colonizable = yes
				is_colony = yes
				exists = solar_system.starbase
				solar_system.starbase.owner = { is_same_value = root.owner }
			}
		}
		name = obsessions_mod_scientist.34.c
		hidden_effect = {
			country_event = { id = obsessions_mod_scientist.37 scopes = { from = from } }
		}
	}

	option = {
		trigger = {
			from = {
				is_colonizable = yes
				is_colony = no
				NOT = { exists = solar_system.starbase }
			}
		}
		name = obsessions_mod_scientist.34.d
		hidden_effect = {
			country_event = { id = obsessions_mod_scientist.38 scopes = { from = from } }
		}
	}

	option = {
		trigger = {
			from = {
				is_colonizable = yes
				is_colony = no
				exists = solar_system.starbase
				solar_system.starbase.owner = { NOT = { is_same_value = root.owner } }
			}
		}
		name = obsessions_mod_scientist.34.e
		hidden_effect = {
			country_event = { id = obsessions_mod_scientist.39 scopes = { from = from } }
		}
	}

	option = {
		trigger = {
			from = {
				is_colonizable = yes
				is_colony = yes
				exists = solar_system.starbase
				solar_system.starbase.owner = { NOT = { is_same_value = root.owner } }
			}
		}
		name = obsessions_mod_scientist.34.f
		hidden_effect = {
			country_event = { id = obsessions_mod_scientist.40 scopes = { from = from } }
		}
	}

	option = {
		# Colony owned by someone different than the starbase
		trigger = {
			from = {
				is_colonizable = yes
				is_colony = yes
				exists = solar_system.starbase
				owner = { NOT = { is_same_value = solar_system.starbase.owner } }
			}
		}
		name = obsessions_mod_scientist.34.g
		hidden_effect = {
			country_event = { id = obsessions_mod_scientist.41 scopes = { from = from } }
		}
	}
}

# Obsession is somehow uninhabitable
country_event = {
	id = obsessions_mod_scientist.35
	title = "obsessions_mod_scientist.35.name"
	location = from
	is_triggered_only = yes
	diplomatic = yes
	diplomatic_title = BLANK_STRING

	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = asked_back
			}
		}
		text = "obsessions_mod_scientist.35.a.response"
	}
	desc = "obsessions_mod_scientist.35.desc"

	picture_event_data = {
		portrait = event_target:obsessed_scientist_breakdown
		room = "ethic_spaceship_room"
	}

	option = {
		trigger = {
			event_target:obsessed_scientist_breakdown = { NOT = { has_leader_flag = asked_back } }
		}
		name = obsessions_mod_scientist.35.a
		hidden_effect = {
			event_target:obsessed_scientist_breakdown = {
				set_leader_flag = asked_back
			}
			# Reload the exact same dialog after setting the flag so that the options are 
			# recalculated. We can't just use is_dialog_only for this as that won't show
			# newly eligible options.
			country_event = { id = obsessions_mod_scientist.35 scopes = { from = from } }
		}
	}

	option = {
		trigger = {
			event_target:obsessed_scientist_breakdown = { has_leader_flag = asked_back }
		}
		name = obsessions_mod_scientist.35.b
		custom_tooltip = obsessions_mod_scientist.35.b.tooltip
		hidden_effect = {
			clone_leader = {
				target = event_target:obsessed_scientist_breakdown
				class = admiral
				skill = 5
				traits = {
					trait = leader_trait_engineer
					trait = leader_trait_obsession_admiral_breakdown
				}
			}
		}
	}

	option = {
		name = obsessions_mod_scientist.35.c
		custom_tooltip = obsessions_mod_scientist.35.c.tooltip
		hidden_effect = {
			create_obsessed_pirate_king = yes
		}
	}
}

# Obsession uncolonized and owned
country_event = {
	id = obsessions_mod_scientist.36
	title = "obsessions_mod_scientist.36.name"
	location = from
	is_triggered_only = yes
	diplomatic = yes
	diplomatic_title = BLANK_STRING
	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = admiral_join
			}
		}
		text = "obsessions_mod_scientist.36.a.response"
	}
	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = asked_back
				NOT = { has_leader_flag = admiral_join }
			}
		}
		text = "obsessions_mod_scientist.36.b.response_who"
	}
	desc = "obsessions_mod_scientist.36.desc"

	picture_event_data = {
		portrait = event_target:obsessed_scientist_breakdown
		room = "ethic_spaceship_room"
	}

	option = {
		trigger = {
			event_target:obsessed_scientist_breakdown = { NOT = { has_leader_flag = asked_back } }
		}
		name = obsessions_mod_scientist.36.a
		hidden_effect = {
			event_target:obsessed_scientist_breakdown = {
				set_leader_flag = asked_back
				set_leader_flag = admiral_join
			}
			# Reload the exact same dialog after setting the flag so that the options are 
			# recalculated. We can't just use is_dialog_only for this as that won't show
			# newly eligible options.
			country_event = { id = obsessions_mod_scientist.36 scopes = { from = from } }
		}
	}

	option = {
		trigger = {
			event_target:obsessed_scientist_breakdown = { NOT = { has_leader_flag = asked_back } }
		}
		name = obsessions_mod_scientist.36.b
		hidden_effect = {
			event_target:obsessed_scientist_breakdown = {
				set_leader_flag = asked_back
				if = {
					limit = { NOT = { has_leader_flag = asked_who } }
					set_leader_flag = admiral_join
				}
			}
			# Reload the exact same dialog after setting the flag so that the options are 
			# recalculated. We can't just use is_dialog_only for this as that won't show
			# newly eligible options.
			country_event = { id = obsessions_mod_scientist.36 scopes = { from = from } }
		}
	}

	option = {
		trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = admiral_join
			}
		}
		name = obsessions_mod_scientist.36.c
		custom_tooltip = obsessions_mod_scientist.36.c.tooltip
		hidden_effect = {
			clone_leader = {
				target = event_target:obsessed_scientist_breakdown
				class = admiral
				skill = 5
				traits = {
					trait = leader_trait_engineer
					trait = leader_trait_obsession_admiral_breakdown
				}
			}
		}
	}

	option = {
		name = obsessions_mod_scientist.36.d
		custom_tooltip = obsessions_mod_scientist.36.d.tooltip
		hidden_effect = {
			from = {
				create_colony = {
					owner = root.owner
					species = event_target:obsessed_scientist_species
				}
				create_pop = {
					species = event_target:obsessed_scientist_species
				}
			}
		}
	}

	option = {
		name = obsessions_mod_scientist.36.e
		response_text = obsessions_mod_scientist.36.e.response
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				event_target:obsession_country = {
					add_opinion_modifier = { who = root modifier = opinion_obsession_country_very_bad_start }
					declare_war = {
						target = root
						name = {
							key = "NAME_Obsession_War"
						}
						attacker_war_goal = "wg_independence"
					}
				}
			}
		}
	}

	option = {
		name = obsessions_mod_scientist.36.f
		custom_tooltip = obsessions_mod_scientist.36.f.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				event_target:obsession_country = {
					add_opinion_modifier = { who = root modifier = opinion_obsession_country_bad_start }
					declare_war = {
						target = root
						name = {
							key = "NAME_Obsession_War"
						}
						attacker_war_goal = "wg_independence"
					}
				}
			}
		}
	}
}

# Obsession is our colony
country_event = {
	id = obsessions_mod_scientist.37
	title = "obsessions_mod_scientist.37.name"
	location = from
	is_triggered_only = yes
	diplomatic = yes
	diplomatic_title = BLANK_STRING
	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = admiral_join
			}
		}
		text = "obsessions_mod_scientist.37.a.response"
	}
	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = asked_back
				NOT = { has_leader_flag = admiral_join }
			}
		}
		text = "obsessions_mod_scientist.37.b.response_who"
	}
	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = asked_back
				NOT = { has_leader_flag = admiral_join }
				has_leader_flag = asked_crazy
			}
		}
		text = "obsessions_mod_scientist.37.b.response_crazy"
	}
	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = asked_back
				NOT = { has_leader_flag = admiral_join }
				check_variable = { which = obsession_break_reason value = @breaking_reason_fired }
			}
		}
		text = "obsessions_mod_scientist.37.b.response_fired"
	}
	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = asked_back
				NOT = { has_leader_flag = admiral_join }
				check_variable = { which = obsession_break_reason value = @breaking_reason_denied }
			}
		}
		text = "obsessions_mod_scientist.37.b.response_denied"
	}
	desc = {
		exclusive_trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = asked_back
				NOT = { has_leader_flag = admiral_join }
				check_variable = { which = obsession_break_reason value = @breaking_reason_timeout }
			}
		}
		text = "obsessions_mod_scientist.37.b.response_timeout"
	}
	desc = "obsessions_mod_scientist.37.desc"

	picture_event_data = {
		portrait = event_target:obsessed_scientist_breakdown
		room = "ethic_spaceship_room"
	}

	option = {
		trigger = {
			event_target:obsessed_scientist_breakdown = { NOT = { has_leader_flag = asked_back } }
		}
		name = obsessions_mod_scientist.37.a
		hidden_effect = {
			event_target:obsessed_scientist_breakdown = {
				set_leader_flag = asked_back
				if = {
					limit = {
						NOT = { has_leader_flag = asked_crazy }
						NOT = { check_variable = { which = obsession_break_reason value = @breaking_reason_fired } }
						NOT = { check_variable = { which = obsession_break_reason value = @breaking_reason_denied } }
						NOT = { check_variable = { which = obsession_break_reason value = @breaking_reason_timeout } }
					}
					set_leader_flag = admiral_join
				}
			}
			# Reload the exact same dialog after setting the flag so that the options are 
			# recalculated. We can't just use is_dialog_only for this as that won't show
			# newly eligible options.
			country_event = { id = obsessions_mod_scientist.37 scopes = { from = from } }
		}
	}

	option = {
		trigger = {
			event_target:obsessed_scientist_breakdown = { NOT = { has_leader_flag = asked_back } }
		}
		name = obsessions_mod_scientist.37.b
		hidden_effect = {
			event_target:obsessed_scientist_breakdown = {
				set_leader_flag = asked_back
				if = {
					limit = {
						NOT = { has_leader_flag = asked_who }
						NOT = { check_variable = { which = obsession_break_reason value = @breaking_reason_fired } }
						NOT = { check_variable = { which = obsession_break_reason value = @breaking_reason_denied } }
						NOT = { check_variable = { which = obsession_break_reason value = @breaking_reason_timeout } }
					}
					set_leader_flag = admiral_join
				}
			}
			# Reload the exact same dialog after setting the flag so that the options are 
			# recalculated. We can't just use is_dialog_only for this as that won't show
			# newly eligible options.
			country_event = { id = obsessions_mod_scientist.37 scopes = { from = from } }
		}
	}

	option = {
		trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = admiral_join
			}
		}
		name = obsessions_mod_scientist.37.c
		custom_tooltip = obsessions_mod_scientist.37.c.tooltip
		hidden_effect = {
			clone_leader = {
				target = event_target:obsessed_scientist_breakdown
				class = admiral
				skill = 5
				traits = {
					trait = leader_trait_engineer
					trait = leader_trait_obsession_admiral_breakdown
				}
			}
		}
	}

	option = {
		trigger = {
			event_target:obsessed_scientist_breakdown = {
				has_leader_flag = asked_polite
			}
		}
		name = obsessions_mod_scientist.37.d
		custom_tooltip = obsessions_mod_scientist.37.d.tooltip
		hidden_effect = {
			from = {
				create_pop = {
					species = event_target:obsessed_scientist_species
				}
				every_owned_pop = {
					pop_change_ethic = ethic_materialist
				}
			}
		}
	}

	option = {
		name = obsessions_mod_scientist.37.e
		response_text = obsessions_mod_scientist.37.e.response
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				event_target:obsession_country = {
					add_opinion_modifier = { who = root modifier = opinion_obsession_country_very_bad_start }
					declare_war = {
						target = root
						name = {
							key = "NAME_Obsession_War"
						}
						attacker_war_goal = "wg_independence"
					}
				}
			}
		}
	}

	option = {
		name = obsessions_mod_scientist.37.f
		custom_tooltip = obsessions_mod_scientist.37.f.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				event_target:obsession_country = {
					add_opinion_modifier = { who = root modifier = opinion_obsession_country_bad_start }
					declare_war = {
						target = root
						name = {
							key = "NAME_Obsession_War"
						}
						attacker_war_goal = "wg_independence"
					}
				}
			}
		}
	}
}

# Obsession is unclaimed
country_event = {
	id = obsessions_mod_scientist.38
	title = "obsessions_mod_scientist.38.name"
	location = from
	is_triggered_only = yes
	diplomatic = yes
	diplomatic_title = BLANK_STRING
	desc = "obsessions_mod_scientist.38.desc"

	picture_event_data = {
		portrait = event_target:obsessed_scientist_breakdown
		room = "ethic_spaceship_room"
	}

	option = {
		allow = {
			owner = {
				resource_stockpile_compare = {
					resource = influence
					value >= 50
				}
				resource_stockpile_compare = {
					resource = unity
					value >= 1000
				}
			}
		}
		owner = {
			add_resource = {
				influence = -50
			}
			add_resource = {
				unity = -1000
			}
		}
		name = obsessions_mod_scientist.38.a
		custom_tooltip = obsessions_mod_scientist.38.a.tooltip
		hidden_effect = {
			from = {
				create_colony = {
					owner = root.owner
					species = event_target:obsessed_scientist_species
				}
				create_pop = {
					species = event_target:obsessed_scientist_species
				}
				solar_system = {
					create_starbase = {
						size = starbase_outpost
						owner = event_target:obsession_country
					}
				}
			}
		}
	}

	option = {
		name = obsessions_mod_scientist.38.b
		custom_tooltip = obsessions_mod_scientist.38.b.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				set_obsessed_origin_opinion = yes
			}
		}
	}
}

# Obsession is uncolonized but owned by others
country_event = {
	id = obsessions_mod_scientist.39
	title = "obsessions_mod_scientist.39.name"
	location = from
	is_triggered_only = yes
	diplomatic = yes
	diplomatic_title = BLANK_STRING
	desc = "obsessions_mod_scientist.39.desc"

	picture_event_data = {
		portrait = event_target:obsessed_scientist_breakdown
		room = "ethic_spaceship_room"
	}

	option = {
		trigger = {
			exists = from.solar_system.starbase
			from.solar_system.starbase.owner = {
				opinion_level = { who = root level <= neutral }
				OR = {
					is_subject = no
					NOT = { overlord = { is_same_value = root } }
				}
				NOT = { is_overlord_to = root }
				has_truce = root
				is_in_federation_with = root
				has_defensive_pact = root
			}
		}
		allow = {
			owner = {
				resource_stockpile_compare = {
					resource = influence
					value >= 50
				}
				resource_stockpile_compare = {
					resource = unity
					value >= 1000
				}
			}
		}
		owner = {
			add_resource = {
				influence = -50
			}
			add_resource = {
				unity = -1000
			}
		}
		name = obsessions_mod_scientist.39.a
		custom_tooltip = obsessions_mod_scientist.39.a.tooltip
		hidden_effect = {
			from = {
				create_colony = {
					owner = root.owner
					species = event_target:obsessed_scientist_species
				}
				create_pop = {
					species = event_target:obsessed_scientist_species
				}
				obsessed_root_take_system = yes
				obsessed_root_war = yes
			}
		}
	}

	option = {
		name = obsessions_mod_scientist.39.b
		custom_tooltip = obsessions_mod_scientist.39.b.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_only_war = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				set_obsessed_origin_opinion = yes
			}
		}
	}

	option = {
		trigger = {
			exists = from.solar_system.starbase
			from.solar_system.starbase.owner = {
				opinion_level = { who = root level >= neutral }
			}
		}
		name = obsessions_mod_scientist.39.c
		custom_tooltip = obsessions_mod_scientist.39.c.tooltip
		hidden_effect = {
			from = {
				solar_system.starbase.owner = {
					add_opinion_modifier = { who = root modifier = opinion_obsession_refused_colony }
				}
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_only_war = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				set_obsessed_origin_opinion = yes
			}
		}
	}

	option = {
		trigger = {
			exists = from.solar_system.starbase
			from.solar_system.starbase.owner = {
				is_subject = yes
				overlord = { is_same_value = root }
				NOT = { is_at_war_with = root }
			}
		}
		name = obsessions_mod_scientist.39.d
		custom_tooltip = obsessions_mod_scientist.39.d.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_root_take_system = yes
				# No war as we are taking it from a subject
				create_colony = {
					owner = root.owner
					species = event_target:obsessed_scientist_species
				}
				create_pop = {
					species = event_target:obsessed_scientist_species
				}
			}
		}
	}

	option = {
		allow = {
			owner = {
				resource_stockpile_compare = {
					resource = energy
					value >= 5000
				}
			}
		}
		owner = {
			add_resource = {
				energy = -5000
			}
		}
		name = obsessions_mod_scientist.39.e
		custom_tooltip = obsessions_mod_scientist.39.e.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_only_war = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				event_target:obsession_country = {
					add_opinion_modifier = { who = root modifier = opinion_obsession_country_very_good_start }
					add_resource = {
						energy = 5000
					}
				}
			}
		}
	}
}

# Obsession is somebody else's colony
country_event = {
	id = obsessions_mod_scientist.40
	title = "obsessions_mod_scientist.40.name"
	location = from
	is_triggered_only = yes
	diplomatic = yes
	diplomatic_title = BLANK_STRING
	desc = "obsessions_mod_scientist.40.desc"

	picture_event_data = {
		portrait = event_target:obsessed_scientist_breakdown
		room = "ethic_spaceship_room"
	}

	option = {
		trigger = {
			exists = from.solar_system.starbase
			from.solar_system.starbase.owner = {
				OR = {
					is_subject = no
					NOT = { overlord = { is_same_value = root } }
				}
				NOT = { is_overlord_to = root }
				has_truce = root
				is_in_federation_with = root
				has_defensive_pact = root
			}
		}
		name = obsessions_mod_scientist.40.a
		custom_tooltip = obsessions_mod_scientist.40.a.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_take_planet = yes
				obsessed_only_war = yes
				create_obsessed_fleet = yes
				event_target:obsession_country = {
					add_opinion_modifier = { who = root modifier = opinion_obsession_country_very_good_start }
				}
				# We join in the war
				root = {
					join_war_on_side = {
						war = event_target:obsession_war
						side = event_target:obsession_country
					}
				}
			}
		}
	}

	# The rest of the options copy text from obsessions_mod_scientist.39
	option = {
		name = obsessions_mod_scientist.39.b
		custom_tooltip = obsessions_mod_scientist.39.b.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_only_war = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				set_obsessed_origin_opinion = yes
			}
		}
	}

	option = {
		trigger = {
			exists = from.solar_system.starbase
			from.solar_system.starbase.owner = {
				opinion_level = { who = root level >= neutral }
			}
		}
		name = obsessions_mod_scientist.39.c
		custom_tooltip = obsessions_mod_scientist.39.c.tooltip
		hidden_effect = {
			from = {
				solar_system.starbase.owner = {
					add_opinion_modifier = { who = root modifier = opinion_obsession_refused_colony }
				}
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_only_war = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				set_obsessed_origin_opinion = yes
			}
		}
	}

	option = {
		trigger = {
			exists = from.solar_system.starbase
			from.solar_system.starbase.owner = {
				is_subject = yes
				overlord = { is_same_value = root }
				NOT = { is_at_war_with = root }
			}
		}
		name = obsessions_mod_scientist.39.d
		custom_tooltip = obsessions_mod_scientist.39.d.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_root_take_system = yes
				obsessed_root_take_planet = yes
				# No war as we are taking it from a subject
			}
		}
	}

	option = {
		allow = {
			owner = {
				resource_stockpile_compare = {
					resource = energy
					value >= 5000
				}
			}
		}
		owner = {
			add_resource = {
				energy = -5000
			}
		}
		name = obsessions_mod_scientist.39.e
		custom_tooltip = obsessions_mod_scientist.39.e.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_only_war = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				event_target:obsession_country = {
					add_opinion_modifier = { who = root modifier = opinion_obsession_country_very_good_start }
					add_resource = {
						energy = 5000
					}
				}
			}
		}
	}
}

# Obsession is a mess, probably in the middle of a war
country_event = {
	id = obsessions_mod_scientist.41
	title = "obsessions_mod_scientist.41.name"
	location = from
	is_triggered_only = yes
	diplomatic = yes
	diplomatic_title = BLANK_STRING
	desc = "obsessions_mod_scientist.41.desc"

	picture_event_data = {
		portrait = event_target:obsessed_scientist_breakdown
		room = "ethic_spaceship_room"
	}

	option = {
		allow = {
			owner = {
				resource_stockpile_compare = {
					resource = energy
					value >= 5000
				}
			}
		}
		owner = {
			add_resource = {
				energy = -5000
			}
		}
		name = obsessions_mod_scientist.41.a
		custom_tooltip = obsessions_mod_scientist.41.a.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_only_war = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				event_target:obsession_country = {
					add_opinion_modifier = { who = root modifier = opinion_obsession_country_very_good_start }
					add_resource = {
						energy = 5000
					}
				}
			}
		}
	}

	option = {
		name = obsessions_mod_scientist.41.b
		custom_tooltip = obsessions_mod_scientist.41.b.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_only_war = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				set_obsessed_origin_opinion = yes
			}
		}
	}

	option = {
		name = obsessions_mod_scientist.41.c
		custom_tooltip = obsessions_mod_scientist.41.c.tooltip
		hidden_effect = {
			from = {
				create_obsessed_country = yes
				obsessed_take_system = yes
				obsessed_only_war = yes
				obsessed_take_planet = yes
				create_obsessed_fleet = yes
				add_claims = {
					who = root
					show_notification = no
				}
			}
			event_target:obsession_country = {
				add_opinion_modifier = { who = root modifier = opinion_obsession_country_very_bad_start }
				declare_war = {
					target = root
					name = {
						key = "NAME_Obsession_War"
					}
					attacker_war_goal = "wg_independence"
					effect = { save_event_target_as = obsession_war }
				}
			}
		}
	}
}